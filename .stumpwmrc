;;; -*- lisp -*-
;;; #Date#: 30 May 2010 16:56

(in-package :stumpwm)

(set-font "-*-terminus-medium-*-*-*-12-*-*-*-*-*-*-*")
(set-normal-gravity :center)
(set-fg-color "#101010")
(set-bg-color "#f7f7f7")
(set-border-color "#101010")
(set-focus-color "#101010")
(set-unfocus-color   "#f7f7f7")
(set-win-bg-color    "#f7f7f7")
(setf *colors* (list "#464646"          ; 0 black
                     "#7c7c7c"          ; 1 red
                     "#8e8e8e"          ; 2 green
                     "#a0a0a0"          ; 3 yellow
                     "#686868"          ; 4 blue
                     "#747474"          ; 5 magenta
                     "#868686"          ; 6 cyan
                     "#b9b9b9"          ; 7 white
                     "#525252"          ; 8 personal
                     "#f7f7f7"))        ; 9 personal
(update-color-map (current-screen))
(set-msg-border-width 7)
(set-frame-outline-width 3)
(setf *maxsize-border-width* 3)
(setf *transient-border-width* 2)
(setf *normal-border-width* 2)
(setf *window-border-style* :thin)
(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)
(setf *mouse-focus-policy* :click)
(define-key *root-map* (kbd "c") "exec urxvtc")

;; I need to tag irc window on all groups
;; The Dirty Way :-)

(run-commands "load-module windowtags")
(defcommand my_little_gnext () ()
  (run-commands "gnext" "fselect 2" "pull-tag irc" "fselect 1" "pull-tag fx"))

(defcommand my_little_gprev () ()
  (run-commands "gprev" "fselect 2" "pull-tag irc" "fselect 1" "pull-tag fx"))

(defcommand my_little_gselect () ()
  (run-commands "gselect" "fselect 2" "pull-tag irc" "fselect 1" "pull-tag fx"))

(defcommand my_little_relwarp () ()
  (run-commands "banish" "ratrelwarp -800 -800"))

;; I need my conky friend

(defvar *conky-command*
  "cat /mnt/ramdisk/conkytext")

;; modeline

(setf *screen-mode-line-format*
      (list "^b%g :: %W ::^B^0 %u^>"
            '(:eval (run-shell-command *conky-command* t))))

(setf *mode-line-timeout* 2)
(setf *mode-line-background-color* "#f7f7f7")
(setf *mode-line-foreground-color* "#101010")
(setf *mode-line-border-color* "#101010")
(setf *mode-line-position* :bottom)

(define-key *top-map* (kbd "Pause") "exec mpc toggle")
(define-key *top-map* (kbd "Print") "exec mpc prev")
(define-key *top-map* (kbd "Scroll_Lock") "exec mpc next")
(define-key *top-map* (kbd "M-Pause") "exec echo pause > $HOME/.mplayer_fifo")
(define-key *top-map* (kbd "M-Print") "exec echo seek -30 > $HOME/.mplayer_fifo")
(define-key *top-map* (kbd "M-Scroll_Lock") "exec echo seek +30 > $HOME/.mplayer_fifo")
;; (define-key *top-map* (kbd "M-h") "move-focus left")
;; (define-key *top-map* (kbd "M-l") "move-focus right")
;; (define-key *top-map* (kbd "M-j") "move-focus down")
;; (define-key *top-map* (kbd "M-k") "move-focus up")
;; (define-key *top-map* (kbd "M-H") "move-window left")
;; (define-key *top-map* (kbd "M-L") "move-window right")
;; (define-key *top-map* (kbd "M-J") "move-window down")
;; (define-key *top-map* (kbd "M-K") "move-window up")
;; (define-key *top-map* (kbd "M-s") "vsplit")
;; (define-key *top-map* (kbd "M-f") "hsplit")
;; (define-key *top-map* (kbd "M-i") "next-in-frame")
;; (define-key *top-map* (kbd "M-I") "prev-in-frame")
;; (define-key *top-map* (kbd "M-E") "fselect")
;; (define-key *top-map* (kbd "M-e") "pull-tag vim")
;; (define-key *top-map* (kbd "C-M-h") "exchange-direction left")
;; (define-key *top-map* (kbd "C-M-l") "exchange-direction right")
;; (define-key *top-map* (kbd "C-M-j") "exchange-direction down")
;; (define-key *top-map* (kbd "C-M-k") "exchange-direction up")
;; (define-key *top-map* (kbd "M-v") "show-window-properties")
;; (define-key *top-map* (kbd "M-V") "info")
;; (define-key *top-map* (kbd "M-!") "exec")
;; ;; (define-key *top-map* (kbd "M-p") "exec dmenu_run -l 20 -p '>' -i -nb '#191C23' -nf '#9BBBC6' -sb '#9BBBC6' -sf '#191C23'")
(define-key *top-map* (kbd "M-p") "exec rofi -rnow -font 'Terminus 12' -fg '#101010' -bg '#f7f7f7' -lines '20' -columns '3' -hlfg '#f7f7f7' -hlbg '#101010' -bc '#474737' -bw '3'")
(define-key *top-map* (kbd "M-;") "eval")
(define-key *top-map* (kbd "M-:") "colon")
;; (define-key *top-map* (kbd "M-U") "windowlist")
;; (define-key *top-map* (kbd "M-u") "next-urgent")
;; (define-key *top-map* (kbd "M-w") "frame-windowlist")
;; (define-key *top-map* (kbd "M-A") "time")
;; (define-key *top-map* (kbd "M-a") "title")
;; (define-key *top-map* (kbd "M-g") "vgroups")
;; (define-key *top-map* (kbd "M-n") "my_little_gnext")
;; (define-key *top-map* (kbd "C-M-n") "gnext-with-window")
;; (define-key *top-map* (kbd "M-N") "my_little_gprev")
;; (define-key *top-map* (kbd "C-M-N") "gprev-with-window")
;; (define-key *top-map* (kbd "M-t") "mode-line")
;; (define-key *top-map* (kbd "M-r") "iresize")
;; (define-key *top-map* (kbd "M-b") "banish")
;; (define-key *top-map* (kbd "M-B") "my_little_relwarp")
;; (define-key *top-map* (kbd "M-z") "remove")
(define-key *top-map* (kbd "M-Return") "exec urxvtc")
;; (define-key *top-map* (kbd "M-m") "my_little_gselect")
;; (define-key *top-map* (kbd "M-M") "tag-window")
;; (define-key *top-map* (kbd "C-M-m") "pull-marked")
;; (define-key *top-map* (kbd "M-o") "fullscreen")
;; (define-key *top-map* (kbd "M-y") "exec /home/lidstah/bin/mlock.sh")

(define-key *root-map* (kbd "h") "move-focus left")
(define-key *root-map* (kbd "l") "move-focus right")
(define-key *root-map* (kbd "j") "move-focus down")
(define-key *root-map* (kbd "k") "move-focus up")
(define-key *root-map* (kbd "H") "move-window left")
(define-key *root-map* (kbd "L") "move-window right")
(define-key *root-map* (kbd "J") "move-window down")
(define-key *root-map* (kbd "K") "move-window up")
(define-key *root-map* (kbd "s") "vsplit")
(define-key *root-map* (kbd "f") "hsplit")
(define-key *root-map* (kbd "i") "next-in-frame")
(define-key *root-map* (kbd "F20") "other-in-frame")
(define-key *root-map* (kbd "I") "prev-in-frame")
(define-key *root-map* (kbd "E") "fselect")
(define-key *root-map* (kbd "e") "pull-tag vim")
(define-key *root-map* (kbd "C-h") "exchange-direction left")
(define-key *root-map* (kbd "C-l") "exchange-direction right")
(define-key *root-map* (kbd "C-j") "exchange-direction down")
(define-key *root-map* (kbd "C-k") "exchange-direction up")
(define-key *root-map* (kbd "v") "show-window-properties")
(define-key *root-map* (kbd "V") "info")
(define-key *root-map* (kbd "!") "exec")
(define-key *root-map* (kbd "p") "exec rofi -show run -font 'Terminus 12' -fg '#101010' -bg '#f7f7f7' -lines '20' -columns '3' -hlfg '#f7f7f7' -hlbg '#101010' -bc '#474737' -bw '3'")
(define-key *root-map* (kbd ";") "eval")
(define-key *root-map* (kbd ":") "colon")
(define-key *root-map* (kbd "y") "windowlist")
(define-key *root-map* (kbd "u") "next-urgent")
(define-key *root-map* (kbd "w") "frame-windowlist")
(define-key *root-map* (kbd "A") "time")
(define-key *root-map* (kbd "U") "title")
;; (define-key *root-map* (kbd "g") "kill-window")
(define-key *root-map* (kbd "n") "my_little_gnext")
(define-key *root-map* (kbd "C-n") "gnext-with-window")
(define-key *root-map* (kbd "N") "my_little_gprev")
(define-key *root-map* (kbd "C-N") "gprev-with-window")
(define-key *root-map* (kbd "t") "mode-line")
(define-key *root-map* (kbd "r") "iresize")
(define-key *root-map* (kbd "b") "banish")
(define-key *root-map* (kbd "B") "my_little_relwarp")
(define-key *root-map* (kbd "z") "remove")
(define-key *root-map* (kbd "Return") "exec urxvtc")
(define-key *root-map* (kbd "m") "my_little_gselect")
(define-key *root-map* (kbd "M") "tag-window")
(define-key *root-map* (kbd "C-m") "pull-marked")
(define-key *root-map* (kbd "o") "fullscreen")
(define-key *root-map* (kbd "d") "delete-window")
(define-key *root-map* (kbd "Y") "exec /home/lidstah/bin/mlock.sh")

(setf *resize-increment* 40)
(defun update-resize-map ()
"on refait le mapping du mode iresize avec un incrément supérieur"
  (let ((m (setf *resize-map* (make-sparse-keymap))))
    (let ((i *resize-increment*))
    (labels ((dk (m k c) (define-key m k (format nil c i))))
      (dk m (kbd "k") "resize 0 -~D")
      (dk m (kbd "j") "resize 0 ~D")
      (dk m (kbd "h") "resize -~D 0")
      (dk m (kbd "l") "resize ~D 0")
      (dk m (kbd "RET") "exit-iresize")
      (dk m (kbd "ESC") "abort-iresize")
    M)))) (update-resize-map)
		
(setf (group-name (first (screen-groups (current-screen)))) "pcp")
(run-commands "gnewbg ekl" "gnewbg mail" "gnewbg stm" "gnewbg oth" "restore-from-file /home/lidstah/stumpdump")
(run-shell-command "xsetroot -cursor_name left_ptr")
(run-shell-command "feh --bg-tile white.png")
(run-shell-command "xmodmap -e 'clear mod4'")
(run-shell-command "xmodmap -e 'keycode 133 = F20'")
(run-shell-command "xkbset bouncekeys 50")
(set-prefix-key (kbd "F20"))

;;; vim:filetype=lisp: 
